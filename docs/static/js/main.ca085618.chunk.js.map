{"version":3,"sources":["serviceWorker.js","query/query-pool.js","components/Country.js","components/CountryComponent.js","components/ContinentComponent.js","components/SearchComponent.js","components/GetCountryByLanguageComponent.js","components/LanguageComponent.js","SearchApp.js","index.js"],"names":["Boolean","window","location","hostname","match","GET_ALL_COUNTRIES","gql","GET_COUNTRIES","GET_CONTINENTS","GET_LANGUAGES","Country","props","country","name","toLowerCase","indexOf","search","length","className","capital","emoji","currency","native","phone","CountryComponent","useQuery","variables","query","continent","code","data","loading","error","title","countries","map","index","key","ContinentComponent","continents","languages","SearchComponent","type","placeholder","value","onChange","event","set","target","console","log","GetCountryByLanguageComponent","language","LanguageComponent","client","ApolloClient","uri","getLanguages","document","getElementById","style","display","getContinents","SearchApp","useState","setSearch","setCountries","useEffect","then","response","id","onClick","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ca085618.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { gql } from \"apollo-boost\";\r\n\r\nexport const GET_ALL_COUNTRIES = gql`\r\nquery getAllCountries {\r\n    countries { \r\n      name\r\n      native\r\n      phone\r\n      capital\r\n      currency\r\n      emoji\r\n      languages {\r\n          name\r\n      }\r\n      continent {\r\n          name\r\n          code\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nexport const GET_COUNTRIES = gql`\r\nquery getCountries ($query: String!) {\r\n    countries (filter: {continent: {eq: $query}}) {      \r\n      name\r\n      native\r\n      phone\r\n      capital\r\n      currency\r\n      emoji\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_CONTINENTS = gql`\r\nquery continent {\r\n    continents {     \r\n      name\r\n      code\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_LANGUAGES = gql`\r\nquery getLanguages  {\r\n    languages {      \r\n      name\r\n      native\r\n    }\r\n  }\r\n`;\r\n\r\n","import React from \"react\";\r\nimport \"../App.css\";\r\n\r\nfunction Country(props) {\r\n  const country = props.country; //country object\r\n\r\n  if (\r\n    props.country.name.toLowerCase().indexOf(props.search.toLowerCase()) > -1 &&\r\n    props.search.length > 0\r\n  ) {\r\n    return (\r\n      <div className=\"card-content\">\r\n        <div className=\"card-title\">\r\n          <span> {\"  \" + country.name} </span>\r\n        </div>\r\n        <br />\r\n        <div className=\"card-body\">\r\n          <ul className=\"list\">\r\n            <li> Pais: {country.name}</li>\r\n            <li> Capital: {country.capital}</li>\r\n            <li> Emoji: {country.emoji}</li>\r\n            <li> Moneda: {country.currency}</li>\r\n            <li> Nombre nativo: {country.native}</li>\r\n            <li> Codigo telefono: +{country.phone}</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  return null;\r\n}\r\n\r\nexport default Country;\r\n","import React from \"react\";\r\nimport Country from \"../components/Country\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport { GET_COUNTRIES } from \"../query/query-pool\";\r\n\r\n\r\nfunction CountryComponent(props)\r\n{\r\n    const { data, loading, error } = useQuery(\r\n        GET_COUNTRIES, {variables: {query: props.continent.code}}\r\n    );\r\n    if (loading) return <h3>  </h3>;\r\n    if (error) return <h2>404. Looks like API is down!</h2>;\r\n     \r\n\r\n    let title = false;\r\n\r\n    data.countries.map(country => \r\n        country.name.toLowerCase().indexOf(props.search.toLowerCase()) > -1 && props.search.length > 0 ?\r\n        title = true : null);\r\n\r\n    return (\r\n        <div className=\"card-title\">\r\n            <div className=\"card-body\">\r\n                {title ? props.continent.name : null}\r\n            </div>\r\n            {data.countries.map((country, index) => <Country key={index} country={country} search={props.search}/>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CountryComponent;\r\n","import React from 'react';\r\nimport {useQuery} from '@apollo/react-hooks';\r\nimport {GET_CONTINENTS} from '../query/query-pool';\r\nimport CountryComponent from './CountryComponent';\r\n\r\nfunction ContinentComponent(props)\r\n{\r\n    let title = false;\r\n    const { data, loading, error } = useQuery(\r\n        GET_CONTINENTS\r\n    );\r\n    if (loading) return <h3> </h3>;\r\n    if (error) return <h2>404. Looks like API is down!</h2>;\r\n    /* console.log(data); */\r\n        \r\n        \r\n\r\n    return (\r\n        <div className=\"card-title\">\r\n            <div className=\"card-body\">\r\n               <span>\r\n               {title ? props.continent.name : null}\r\n               </span>\r\n\r\n                {\r\n                data.continents.map(\r\n                    (continent, index) => <CountryComponent key={index} continent={continent} languages={\"\"} search={props.search} />)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ContinentComponent;\r\n","import React from \"react\";\r\n\r\nfunction SearchComponent(props) {\r\n  return (\r\n    <div className=\"card-header\">\r\n      <h3>Type your country</h3>\r\n      <input\r\n        className=\"input-text\"\r\n        type=\"text\"\r\n        placeholder=\"Search a Country\"\r\n        value={props.search}\r\n        onChange={(event) => {\r\n          props.set(event.target.value);\r\n          console.log('u wrote this:'+ event.target.value);\r\n        }}\r\n      />\r\n      <hr />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchComponent;\r\n","import React from \"react\";\r\nimport Country from \"./Country\";\r\n\r\nfunction GetCountryByLanguageComponent(props) {\r\n  let title = false;\r\n  props.countries.map(\r\n    (country) =>\r\n      country.name.toLowerCase().indexOf(props.search.toLowerCase()) > -1 &&\r\n      props.search.length > 0 &&\r\n      country.languages.map((language) =>\r\n        language.name === props.language.name ? (title = true) : null\r\n      )\r\n  );\r\n\r\n  return (\r\n    <div className=\"card-title\">\r\n      <div className=\"card-body\">{title ? props.language.name : null}</div>\r\n      {props.countries.map((country, index) =>\r\n        country.languages.map((language) =>\r\n          language.name === props.language.name ? (\r\n            <Country key={index} country={country} search={props.search} />\r\n          ) : null\r\n        )\r\n      )}\r\n    </div>\r\n  );\r\n}\r\nexport default GetCountryByLanguageComponent;\r\n","import React from \"react\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport { GET_LANGUAGES } from \"../query/query-pool\";\r\nimport GetCountryByLanguageComponent from \"./GetCountryByLanguageComponent\";\r\n\r\nfunction LanguageComponent(props) {\r\n  let title = false;\r\n  const { data, loading, error } = useQuery(GET_LANGUAGES);\r\n  if (loading) return <h3>Loading...</h3>;\r\n  if (error) return <h2>404. Looks like API is down!</h2>;\r\n  /* console.log(data); */\r\n\r\n  return (\r\n    <div className=\"card-title\">\r\n      <div className=\"card-body\">\r\n        {title ? props.language.name : null}\r\n        {data.languages.map((language, index) => (\r\n          <GetCountryByLanguageComponent \r\n            key={index}\r\n            countries={props.countries}\r\n            language={language}\r\n            search={props.search}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LanguageComponent;\r\n","import React, {useState, useEffect} from \"react\";\r\nimport ContinentComponent from \"./components/ContinentComponent\";\r\nimport SearchComponent from \"./components/SearchComponent\";\r\nimport LanguageComponent from \"./components/LanguageComponent\";\r\nimport ApolloClient from \"apollo-boost\";\r\nimport { ApolloProvider } from \"@apollo/react-hooks\";\r\nimport { GET_ALL_COUNTRIES } from \"./query/query-pool\";\r\nimport \"./App.css\";\r\n\r\nconst client = new ApolloClient({\r\n  uri: \"https://countries.trevorblades.com\",\r\n});\r\n\r\n\r\n  function getLanguages()\r\n  {\r\n    let languageDiv = document.getElementById(\"language\");\r\n    languageDiv.style.display = \"block\";\r\n\r\n    let continentDiv = document.getElementById(\"continent\");\r\n    continentDiv.style.display = \"none\";\r\n\r\n    let searchLanguage = document.getElementById(\"searchByLanguage\");\r\n    searchLanguage.className = \"active\";\r\n\r\n    let searchContinent = document.getElementById(\"searchByContinent\");\r\n    searchContinent.className = \"\";\r\n\r\n  }\r\n\r\n  function getContinents()\r\n  {\r\n    let languageDiv = document.getElementById(\"language\");\r\n    languageDiv.style.display = \"none\";\r\n    \r\n    let continentDiv = document.getElementById(\"continent\");\r\n    continentDiv.style.display = \"block\";\r\n    \r\n    let searchLanguage = document.getElementById(\"searchByLanguage\");\r\n    searchLanguage.className = \"\";\r\n\r\n    let searchContinent = document.getElementById(\"searchByContinent\");\r\n    searchContinent.className = \"active\";\r\n  \r\n  }\r\n\r\n  function SearchApp() \r\n  {\r\n    const [search, setSearch] = useState(\"\");\r\n    const [countries, setCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n      client\r\n        .query({\r\n          query: GET_ALL_COUNTRIES,\r\n        })\r\n        .then((response) => {\r\n          setCountries(response.data.countries);\r\n        });\r\n    }, []);\r\n    /* console.log(countries); */\r\n    if (countries) {\r\n      return(\r\n        <ApolloProvider client={client}>\r\n                <div className=\"card\">\r\n                  <div className=\"card-header\">\r\n                    <h1>Country Search App</h1>\r\n                  </div>\r\n                  <div className=\"card-body\">\r\n                    <SearchComponent set={setSearch}/>\r\n                    <div className=\"card-body\">\r\n                      \r\n                       <h4> Group by :</h4>\r\n                        <button \r\n                          id=\"searchByContinent\" \r\n                          className=\"myButton\" \r\n                          onClick={getContinents}\r\n                        >\r\n                          Continents\r\n                        </button><span> </span>\r\n                        <button \r\n                          id=\"searchByLanguage\" \r\n                          className=\"myButton\" \r\n                          onClick={getLanguages}\r\n                        >\r\n                          Languages\r\n                        </button>\r\n                      </div>\r\n                      <div id=\"continent\" style={{display: 'block'}} className=\"col-md-6\">\r\n                        <ContinentComponent  search={search}/>\r\n                        </div>\r\n                      <div id=\"language\" style={{display: 'none'}} className=\"col-md-6\">\r\n                        <LanguageComponent countries={countries} search={search}/>\r\n                      </div>\r\n                    </div>\r\n                  </div>                \r\n        </ApolloProvider>\r\n      )\r\n    }  else {\r\n      \r\n     }\r\n\r\n\r\n  }\r\n\r\n  export default SearchApp;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport SearchApp from './SearchApp';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <SearchApp />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}